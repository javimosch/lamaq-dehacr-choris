var gulp = require('gulp');
var watch = require('gulp-watch');
var sass = require('gulp-sass');
var connect = require('gulp-connect');
var run = require('gulp-run');
var runSequence = require('run-sequence');
var sourcemaps = require('gulp-sourcemaps');
var browserify = require('gulp-browserify');
var minify = require('gulp-minify');
var rename = require("gulp-rename");
var clean = require('gulp-clean');
var gulpif = require('gulp-if');
var uglify = require('gulp-uglify');
var ts = require('gulp-typescript');
var notify = require('gulp-notify');
var gutil = require('gulp-util');
var jshint = require('gulp-jshint');
var stylish = require('jshint-stylish');


var isProduction = false;
var sassOptions = {};

gulp.task('watch', function() {
	console.log('watch-start');
	watch('src/scripts/**/*.ts', function() {
		runSequence('build-scripts-ts', 'reload', function() {
			console.log('scripts-ok');
		});
	});
	watch('src/vendor/**/*.js', function() {
		runSequence('build-scripts-vendor', 'reload', function() {
			console.log('scripts-vendor-ok');
		});
	});


	watch('src/scripts/**/*.js', function() {
		runSequence('build-scripts-js', 'reload', function() {
			console.log('scripts-js-ok');
		});
	}); //.unwatch('src/scripts/vendor.js');

	watch('index.html', function() {
		runSequence('reload', function() {
			console.log('index-ok');
		});
	});
	watch('src/assets/**/*.*', function() {
		runSequence('build-assets', 'reload', function() {
			console.log('assets-ok');
		});
	});
	watch('src/styles/**/*.*', function() {
		runSequence('build-styles', 'reload', function() {
			console.log('styles-ok');
		});
	});
});



gulp.task('build-scripts-ts', function() {
	//return run('tsc --sourcemap --out dist/app.js src/scripts/app.ts --module commonjs').exec();
	return run('tsc src/scripts/**/*.ts --module commonjs').exec();
	/*
		return gulp.src('src/scripts/app.ts')
			.pipe(ts({
				noImplicitAny: false,
				out: 'app.js',
				module: 'commonjs'
				//,experimentalDecorators:true
			}))
			//.pipe(gulpif(!isProduction, sourcemaps.init()))
			//.pipe(gulpif(isProduction, uglify()))
			//.pipe(gulpif(isProduction, minify()))
			//.pipe(gulpif(!isProduction, sourcemaps.write()))
			.pipe(gulp.dest('dist'));
	*/
});

gulp.task('build-scripts-vendor', function() {
	return gulp.src('src/vendor/vendor.js')
		.pipe(browserify({
			insertGlobals: true,
			debug: !isProduction
		}))
		.pipe(gulpif(!isProduction, sourcemaps.init()))
		.pipe(gulpif(isProduction, uglify()))
		.pipe(gulpif(isProduction, minify()))
		.pipe(gulpif(!isProduction, sourcemaps.write()))
		.pipe(rename('vendor.js'))
		.pipe(gulp.dest('dist'));
});

gulp.task('lintjs', function() {
	return gulp.src([
			'gulpfile.js',
			'./src/scripts/**/*.js'
		]).pipe(jshint())
		.pipe(jshint.reporter(stylish))
		.on('error', function() {

		});
});

gulp.task('build-scripts-js', function() {
	return gulp.src('src/scripts/app.js')
		.pipe(browserify({
			insertGlobals: true,
			debug: !isProduction
		}))
		.on('error', handleError('build-scripts-js'))
		.pipe(gulpif(!isProduction, sourcemaps.init()))
		.pipe(gulpif(isProduction, uglify()))
		.pipe(gulpif(isProduction, minify()))
		.pipe(gulpif(!isProduction, sourcemaps.write()))
		.pipe(rename('app.js'))
		.pipe(gulp.dest('dist'));
});

gulp.task('clean', function() {
	return gulp.src('dist', {
			read: false
		})
		.pipe(clean({
			force: true
		}));
});

gulp.task('build-assets', function() {
	return gulp.src('src/assets/**')
		.pipe(gulp.dest('dist'));
});

gulp.task('build-styles', function() {
	return gulp.src('src/styles/app.scss')
		.pipe(gulpif(!isProduction, sourcemaps.init()))
		.pipe(sass(sassOptions).on('error', sass.logError))
		.pipe(gulpif(!isProduction, sourcemaps.write()))
		.pipe(gulp.dest('dist'));
});

gulp.task('build-dev', ['build-assets'], function(cb) {
	console.log('build-start');
	runSequence(
		'clean',
		'build-styles',
		'build-scripts-ts',
		'build-scripts-js',
		'build-scripts-vendor',
		'build-assets',
		function() {
			console.log('build-end');
			cb();
		});
});

gulp.task('build', function() {
	isProduction = true;
	sassOptions = {
		outputStyle: 'compressed'
	};
	gulp.run('build-dev');
});

gulp.task('reload', function() {
	gulp.src('./dist/index.html')
		.pipe(connect.reload());
});

gulp.task('connect', function() {
	connect.server({
		root: './dist',
		port: 3333,
		livereload: true
	});
});

var handleError = function(task) {
	return function(err) {
		notify.onError({
			message: task + ' failed, check the logs..',
			sound: false
		})(err);

		gutil.log(gutil.colors.bgRed(task + ' error:'), gutil.colors.red(err));
	};
};


gulp.task('dev', function() {
	runSequence('build-dev', 'watch', 'connect');
});

gulp.task('default', ['dev']);